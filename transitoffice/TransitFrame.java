/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package transitoffice;

import districtoffice.*;
import sender_information.Packages;
import shipper.Shipper;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.*;

/**
 *
 * @author HAI YEN
 */
public class TransitFrame extends JFrame {

    private PriorityQueue<Packages> packages;

    private Map<String, Office> districtMap;  // Quản lý các quận

    public TransitFrame(PriorityQueue<Packages> packages) {
        this.packages = packages;
        districtMap = classifyPackages();
        initComponents();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * Creates new form TransitFrame
     */
    public TransitFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        title = new JLabel();
        districtLabel = new JLabel();
        districtComboBox = new JComboBox<>();
        inforTable = new JScrollPane();
        shipTable = new JTable();
        inforTable1 = new JScrollPane();
        districtTable = new JTable();
        titleDistrictTable = new JLabel();
        showButton = new JButton();
        titleShipperTable = new JLabel();
        getPackageButton = new JButton();
        sendPackageButton = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("THEO DÕI ĐƠN HÀNG");
        setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        setResizable(false);

        title.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        title.setText("THEO DÕI CÁC ĐƠN HÀNG TRONG BƯU CỤC QUẬN VÀ ĐƠN HÀNG TRONG GIỎ HÀNG SHIPPER");

        districtLabel.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        districtLabel.setText(" Quận :");

        districtComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Ba Đình", "Đống Đa", "Cầu Giấy", "Thanh Xuân", "Tây Hồ" }));
        districtComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                districtComboBoxActionPerformed(evt);
            }
        });

        shipTable.setModel(new DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "Mã đơn", "Người gửi", "Người nhận", "Địa chỉ nhận", "Tên hàng hoá", "Số điện thoại", "Dịch vụ"
                }
        ) {
            Class[] types = new Class [] {
                    String.class, String.class, String.class, String.class, String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        shipTable.getTableHeader().setReorderingAllowed(false);
        inforTable.setViewportView(shipTable);
        if (shipTable.getColumnModel().getColumnCount() > 0) {
            shipTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            shipTable.getColumnModel().getColumn(1).setPreferredWidth(110);
            shipTable.getColumnModel().getColumn(2).setPreferredWidth(110);
            shipTable.getColumnModel().getColumn(3).setPreferredWidth(320);
        }

        districtTable.setModel(new DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "Mã đơn", "Người gửi", "Người nhận", "Địa chỉ nhận", "Tên hàng hoá", "Số điện thoại", "Dịch vụ"
                }
        ) {
            Class[] types = new Class [] {
                    String.class, String.class, String.class, String.class, String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        districtTable.getTableHeader().setReorderingAllowed(false);
        inforTable1.setViewportView(districtTable);
        if (districtTable.getColumnModel().getColumnCount() > 0) {
            districtTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            districtTable.getColumnModel().getColumn(1).setPreferredWidth(110);
            districtTable.getColumnModel().getColumn(2).setPreferredWidth(110);
            districtTable.getColumnModel().getColumn(3).setPreferredWidth(320);
        }

        titleDistrictTable.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        titleDistrictTable.setText("CÁC ĐƠN HÀNG HIỆN TẠI TRONG BƯU CỤC QUẬN");

        showButton.setText("Xem thông tin");
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });

        titleShipperTable.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        titleShipperTable.setText("CÁC ĐƠN HÀNG HIỆN TẠI TRONG GIỎ HÀNG SHIPPER");

        getPackageButton.setText("Lấy hàng từ bưu cục quận");
        getPackageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPackageButtonActionPerformed(evt);
            }
        });

        sendPackageButton.setText("Giao hàng");
        sendPackageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendPackageButtonActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(inforTable)
                                                        .addComponent(inforTable1)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(287, 287, 287)
                                                .addComponent(districtLabel, GroupLayout.PREFERRED_SIZE, 46, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(districtComboBox, GroupLayout.PREFERRED_SIZE, 139, GroupLayout.PREFERRED_SIZE)
                                                .addGap(68, 68, 68)
                                                .addComponent(showButton)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(195, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(title, GroupLayout.PREFERRED_SIZE, 621, GroupLayout.PREFERRED_SIZE)
                                                .addGap(184, 184, 184))
                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(titleShipperTable, GroupLayout.PREFERRED_SIZE, 485, GroupLayout.PREFERRED_SIZE)
                                                .addGap(230, 230, 230))))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(273, 273, 273)
                                .addComponent(titleDistrictTable, GroupLayout.PREFERRED_SIZE, 435, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(140, 140, 140)
                                .addComponent(getPackageButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sendPackageButton)
                                .addGap(286, 286, 286))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(title, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(districtLabel)
                                        .addComponent(districtComboBox, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(showButton))
                                .addGap(40, 40, 40)
                                .addComponent(titleDistrictTable, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inforTable1, GroupLayout.PREFERRED_SIZE, 170, GroupLayout.PREFERRED_SIZE)
                                .addGap(72, 72, 72)
                                .addComponent(titleShipperTable, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inforTable, GroupLayout.PREFERRED_SIZE, 170, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(getPackageButton)
                                        .addComponent(sendPackageButton))
                                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void districtComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

    }

    private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String selectedDistrict = districtComboBox.getSelectedItem().toString();
        // Thực hiện hành động dựa trên quận được chọn
        titleDistrictTable.setText("CÁC ĐƠN HÀNG HIỆN TẠI TRONG BƯU CỤC QUẬN "+selectedDistrict.toUpperCase());
        titleShipperTable.setText("CÁC ĐƠN HÀNG TRONG GIỎ HÀNG CỦA SHIPPER QUẬN "+selectedDistrict.toUpperCase());
        transitDistrict();
    }

    private void getPackageButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        JFrame processingFrame = new JFrame();
        processingFrame.setTitle("Shipper đang lấy hàng");
        processingFrame.setBounds(500, 400, 600, 100);
        processingFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JProgressBar progressBar = new JProgressBar();
        progressBar.setIndeterminate(true); // Sử dụng hiệu ứng vô hạn cho progress bar
        progressBar.setString("Đang tính toán đưa ra lộ trình tối ưu nhất, vui lòng không thoát chương trình...");
        progressBar.setStringPainted(true);

        processingFrame.add(progressBar);
        processingFrame.setVisible(true);

        SwingWorker<Void, Void> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                Office newDistrict = districtMap.get(districtComboBox.getSelectedItem().toString());
                showPackageQueue(newDistrict.getShipper());
                // Các công việc xử lý dữ liệu, phân loại, và hiển thị dữ liệu ở đây
                // Nếu shipper của quận đó đang có đơn hàng trong queue chưa giao hết thì không được lấy thêm gói hàng mới
                if (!newDistrict.getShipper().getQueue().isEmpty()) {
                    showPackageQueue(newDistrict.getShipper());
                    showDeliveryDetails();
                    // Hiển thị thông báo shipper không thể lấy thêm hàng
                    JOptionPane.showMessageDialog(rootPane, "Shipper chưa hoàn thành các đơn hàng nên chưa thể nhận đơn mới!");
                } else if (newDistrict.getPackageQueue().isEmpty()) {
                    // Không còn đơn hàng nào ở bưu cục thì không thể nhận đơn hàng mới
                    // Hiển thị thông báo shipper không thể lấy thêm hàng
                    JOptionPane.showMessageDialog(rootPane, "Hiện tại chưa có đơn nào cần được giao cả");
                } else {
                    // Shipper sẽ lấy hàng ở quận để mang đi ship
                    // Shipper sẽ được tính toán để đưa ra lộ trình tối ưu nhất
                    newDistrict.getShipper().getPackages();
                    showPackageQueue(newDistrict.getShipper());
                    // Show các đơn hàng còn lại sau khi shipper đã lấy đi mất 1 số
                    showDeliveryDetails();
                }
                return null;
            }

            @Override
            protected void done() {
                processingFrame.dispose(); // Sau khi công việc đã xong, đóng frame hiển thị thông báo
                // Tiếp tục với các hành động sau khi công việc kết thúc (nếu cần)

            }
        };
        worker.execute(); // Bắt đầu thực hiện công việc trong background thread
    }


    private void sendPackageButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        Office district = districtMap.get(districtComboBox.getSelectedItem().toString());
        if (district.getShipper().getQueue().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Không có đơn hàng nào cần hoàn thành cả, hãy nhận đơn mới nhé!");
        } else {
            // Hiển thị hộp thoại xác nhận
            int choice = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn hoàn thành đơn hàng "+district.getShipper().getQueue().peek()+"?", "Xác nhận hoàn thành", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                // Thực hiện các lệnh sau khi xác nhận
                district.getShipper().ship();
                showPackageQueue(district.getShipper());
            } else {
                // Đóng thông báo và không làm gì
            }
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TransitFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private JComboBox<String> districtComboBox;
    private JLabel districtLabel;
    private JTable districtTable;
    private JButton getPackageButton;
    private JScrollPane inforTable;
    private JScrollPane inforTable1;
    private JButton sendPackageButton;
    private JTable shipTable;
    private JButton showButton;
    private JLabel title;
    private JLabel titleDistrictTable;
    private JLabel titleShipperTable;
    // End of variables declaration

    public void transitDistrict() {
        // Hiển thị các đơn hàng có trong queue của các quận
        showDeliveryDetails();
        showPackageQueue( districtMap.get(districtComboBox.getSelectedItem().toString()).getShipper());
    }


    // Phân chia các gói hàng vào các quận
    public Map<String, Office> classifyPackages() {
        Map<String, Office> districtOfficeMap = new HashMap<>();
        districtOfficeMap.put("Thanh Xuân", new ThanhXuanOffice());
        districtOfficeMap.put("Đống Đa", new DongDaOffice());
        districtOfficeMap.put("Ba Đình", new BaDinhOffice());
        districtOfficeMap.put("Tây Hồ", new TayHoOffice());
        districtOfficeMap.put("Cầu Giấy", new CauGiayOffice());

        // Phân loại gói hàng theo từng quận
        while (!packages.isEmpty()) {
            classifyPackageByDistrict(packages.poll(), districtOfficeMap);
        }

        return districtOfficeMap;
    }

    public void classifyPackageByDistrict(Packages packages, Map<String, Office> districtOfficeMap) {
        String[] districtArray = packages.getAddress().split(",");
        String district = districtArray[districtArray.length - 1].trim();
        if (districtOfficeMap.containsKey(district)) {
            Office office = districtOfficeMap.get(district);
            office.deliverToOffice(packages);
        } else {
            System.out.println("ERROR! Unknown district: " + district);
        }
    }

    public Queue<Packages> copyQueue(Queue<Packages> originalQueue) {
        // Tạo một bản sao của PriorityQueue của quận đã chọn để duyệt qua
        Queue<Packages> tempQueue = new LinkedList<>();

        for (Packages pack : originalQueue) {
            tempQueue.add(pack); // Thêm từng phần tử từ hàng đợi gốc vào hàng đợi mới
        }
        return tempQueue;
    }
    // Show các đơn hàng có trong quận bằng cách lấy từ queue
    public void showDeliveryDetails() {
        // Xóa dữ liệu hiện có trong bảng để hiển thị dữ liệu mới
        Office selectedDistrict = districtMap.get(districtComboBox.getSelectedItem().toString());
        ((DefaultTableModel) districtTable.getModel()).setRowCount(0);

        // Tạo một bản sao của PriorityQueue của quận đã chọn để duyệt qua
        Queue<Packages> tempQueue = copyQueue(selectedDistrict.getPackageQueue());

        // Lấy dữ liệu từ PriorityQueue và hiển thị trên bảng
        while (!tempQueue.isEmpty()) {
            Packages pack = tempQueue.poll();
            ((DefaultTableModel) districtTable.getModel()).addRow(new Object[]{pack.getId(), pack.getSender(), pack.getReceiver(), pack.getAddress(), pack.getGoods(), pack.getPhonenumber(), pack.getService()});
        }
    }

    public void showPackageQueue(Shipper shipper) {
        if (shipper.getQueue().size() == 0){
            while ((shipTable.getModel()).getRowCount() > 0) {
                ((DefaultTableModel) shipTable.getModel()).removeRow(0);
            }
            return;
        }
        // Xoá tất cả các hàng trong bảng trước khi in dữ liệu mới
        while ((shipTable.getModel()).getRowCount() > 0) {
            ((DefaultTableModel) shipTable.getModel()).removeRow(0);
        }
        Queue<Packages> tempQueue = copyQueue(shipper.getQueue());
        // Lấy dữ liệu từ PriorityQueue và hiển thị trên bảng
        while (!tempQueue.isEmpty()) {
            Packages pack = tempQueue.poll();
            ((DefaultTableModel) shipTable.getModel()).addRow(new Object[]{pack.getId(), pack.getSender(), pack.getReceiver(), pack.getAddress(), pack.getGoods(), pack.getPhonenumber(), pack.getService()});
        }
    }

}
